#!/bin/sh
#
# $Id$
#

# Default netskel settings (override in ~/.netskelrc)

NETSKEL_USE_HTTPS=1
NETSKEL_USE_HTTP=0
NETSKEL_LOGFILE=$HOME/.netskel_log
NETSKEL_LOGFILE_LIMIT=512
NETSKEL_DBFILE=$HOME/.netskeldb
NETSKEL_TMP=$TMP/netskel
NETSKEL_ROOT=$HOME

# Load in our local config variables

source $HOME/.netskelrc

# Ensure that DEBUG is set

if [ ${NETSKEL_DEBUG:-0} = 0 ] ; then
    NETSKEL_DEBUG=0
fi

# Functions

netskel_log() {
  if [ $NETSKEL_DEBUG > 0 ] ; then
    echo "$1"
  fi
  echo -n `date -u "+%s"` >> $NETSKEL_LOGFILE
  echo " $1" >> $NETSKEL_LOGFILE
}

netskel_trace() {
  if [ $NETSKEL_DEBUG > 0 ] ; then
    netskel_log "$1"
  fi
}

netskel_find_executable() {
  netskel_trace "Looking for $1 binary"
  NETSKEL_BIN=`which $1 2>/dev/null`
  if [ ! -x "$NETSKEL_BIN" ] ; then
    unset NETSKEL_BIN
    netskel_trace "Not found"
    return -1
  fi
  netskel_trace "Found at $NETSKEL_BIN"
  eval NETSKEL_PATH_$1=$NETSKEL_BIN
  unset NETSKEL_BIN
  return 0
}

netskel_path_push() {
  if [ -d $1 ] ; then
    PATH=$PATH:$1
  fi
  return 0
}

netskel_die() {
  NETSKEL_DEBUG=1
  netskel_log "$1"
  echo "$1" > /dev/stderr
  exit
}
  
netskel_preflight() {
  netskel_log "- - - `date -u '+%d-%b-%Y @ %T UTC'`"
  netskel_trace "Performing pre-flight checks"

  umask 077

  if [ ! -d $NETSKEL_TMP ] ; then
    netskel_log "Creating temporary directory $NETSKEL_TMP"
    mkdir $NETSKEL_TMP || netskel_die "Unable to create temporary directory"
  fi

  PATH=/bin
  netskel_path_push /sbin
  netskel_path_push /usr/bin
  netskel_path_push /usr/sbin
  netskel_path_push /usr/local/bin
  netskel_path_push /usr/local/sbin
  netskel_path_push /opt/bin
  netskel_path_push /opt/sbin
  netskel_path_push /opt/local/bin
  netskel_path_push /opt/local/sbin
  netskel_path_push $HOME/bin
  netskel_trace "Path set to $PATH"
  
  netskel_find_executable fetch
  netskel_find_executable wget
  netskel_find_executable curl
  netskel_find_executable lynx
  netskel_find_executable dog

  netskel_find_executable md5
  netskel_find_executable md5sum

  set | grep NETSKEL
}

netskel_cleanup() {
  netskel_trace "Cleaning the bugs off the wings"

  tail -$NETSKEL_LOGFILE_LIMIT $NETSKEL_LOGFILE > $NETSKEL_LOGFILE.tmp
  mv $NETSKEL_LOGFILE.tmp $NETSKEL_LOGFILE
}

netskel_fetch_with_fetch() {
  if [ ! -x $NETSKEL_PATH_fetch ] ; then
    return -1
  fi
  netskel_trace "fetching $1 to $2 using fetch"
  $NETSKEL_PATH_fetch -q -o $2 $1 >/dev/null 2>/dev/null
  RETVAL=$?
  return $RETVAL
}

netskel_fetch_with_wget() {
  if [ ! -x $NETSKEL_PATH_wget ] ; then
    return -1
  fi
  netskel_trace "fetching $1 to $2 using wget"
  $NETSKEL_PATH_wget -q --cache=off --no-check-certificate -O $2 $1 >/dev/null 2>/dev/null
  RETVAL=$?
  return $RETVAL
}

netskel_fetch_file() {
  NETSKEL_TARGET=$NETSKEL_TMP/`basename $1`

  NETSKEL_URL=https://$NETSKEL_HOST$NETSKEL_BASE/$NETSKEL_USER/$1

  netskel_fetch_with_fetch $NETSKEL_URL $NETSKEL_TARGET || \
  netskel_fetch_with_wget  $NETSKEL_URL $NETSKEL_TARGET
  # netskel_fetch_with_curl  $NETSKEL_URL $NETSKEL_TARGET || \
  # netskel_fetch_with_dog   $NETSKEL_URL $NETSKEL_TARGET
  RETVAL=$?

  return $RETVAL
}

netskel_stat_md5() {
  return $md5_value
}

netskel_sync_file() {
  fullpath=$NETSKEL_ROOT/$1
  NETSKEL_NEED_SYNC=0
  netskel_trace "Trying to sync file $fullpath"

  if [ -f $fullpath ] ; then
    NETSKEL_TARGET_SIZE=`grep $1 $NETSKEL_DBFILE | cut -f 4`
    NETSKEL_TARGET_MD5=`grep $1 $NETSKEL_DBFILE | cut -f 5`

    eval `stat -s $fullpath` || st_size=`stat --format '%s' $fullpath`
    NETSKEL_FILE_SIZE=$st_size

    if [ -x $NETSKEL_PATH_md5 ] ; then
      md5_value=`$NETSKEL_PATH_md5 -q $fullpath`
      echo "p1 is $md5_value"
    fi
    if [ -x $NETSKEL_PATH_md5sum ] ; then
      md5_value=`$NETSKEL_PATH_md5sum $fullpath | cut -d ' ' -f 1`
    fi
    NETSKEL_FILE_MD5=$md5_value
    echo "moo cow md5 is $NETSKEL_FILE_MD5 from $md5_value"

    netskel_trace "File compare for $1: ($NETSKEL_FILE_SIZE:$NETSKEL_TARGET_SIZE) ($NETSKEL_FILE_MD5:$NETSKEL_TARGET_MD5)"
  else
    NETSKEL_NEED_SYNC=1
  fi

  if [ $NETSKEL_NEED_SYNC = 1 ] ; then
    netskel_fetch_file $1 && mv $NETSKEL_TMP/$1 $fullpath && netskel_log "Updated file $1"
  fi
}

# Main Program

netskel_preflight

netskel_fetch_file .netskeldb && mv $NETSKEL_TMP/.netskeldb $NETSKEL_DBFILE || netskel_die "Unable to fetch dbfile"
for file in `grep -v "#" $NETSKEL_DBFILE | cut -f 1 | xargs`; do
  netskel_sync_file $file
done

netskel_cleanup

